================================================================================
empty_statement
================================================================================

;
;;

--------------------------------------------------------------------------------

(chunk
  (empty_statement)
  (empty_statement)
  (empty_statement))

================================================================================
assignment_statement
================================================================================

i = 1
j, tbl[k()] = 2, i + 1
x, y = y, x

--------------------------------------------------------------------------------

(chunk
  (assignment_statement
    (variable_list
      name: (identifier))
    (expression_list
      value: (number)))
  (assignment_statement
    (variable_list
      name: (identifier)
      name: (bracket_index_expression
        table: (identifier)
        field: (function_call
          name: (identifier)
          arguments: (arguments))))
    (expression_list
      value: (number)
      value: (binary_expression
        left: (identifier)
        right: (number))))
  (assignment_statement
    (variable_list
      name: (identifier)
      name: (identifier))
    (expression_list
      value: (identifier)
      value: (identifier))))

================================================================================
function_call
================================================================================

f1()

tbl.f2()

tbl["f2"]()

tbl.k1:f3()

f4(a1)("a2") { a3 = "a3" }

--------------------------------------------------------------------------------

(chunk
  (function_call
    name: (identifier)
    arguments: (arguments))
  (function_call
    name: (dot_index_expression
      table: (identifier)
      field: (identifier))
    arguments: (arguments))
  (function_call
    name: (bracket_index_expression
      table: (identifier)
      field: (string
        content: (string_content)))
    arguments: (arguments))
  (function_call
    name: (method_index_expression
      table: (dot_index_expression
        table: (identifier)
        field: (identifier))
      method: (identifier))
    arguments: (arguments))
  (function_call
    name: (function_call
      name: (function_call
        name: (identifier)
        arguments: (arguments
          (identifier)))
      arguments: (arguments
        (string
          content: (string_content))))
    arguments: (arguments
      (table_constructor
        (field
          name: (identifier)
          value: (string
            content: (string_content)))))))

================================================================================
label_statement
================================================================================

:: label_name ::

--------------------------------------------------------------------------------

(chunk
  (label_statement
    (identifier)))

================================================================================
break_statement
================================================================================

for k, v in pairs(kv) do
  if not v then
    break
  end
end

--------------------------------------------------------------------------------

(chunk
  (for_statement
    clause: (for_generic_clause
      (variable_list
        name: (identifier)
        name: (identifier))
      (expression_list
        (function_call
          name: (identifier)
          arguments: (arguments
            (identifier)))))
    body: (block
      (if_statement
        condition: (unary_expression
          operand: (identifier))
        consequence: (block
          (break_statement))))))

================================================================================
goto_statement
================================================================================

goto label_name

--------------------------------------------------------------------------------

(chunk
  (goto_statement
    (identifier)))

================================================================================
do_statement
================================================================================

do
  f1()
  return f2()
end

do end

--------------------------------------------------------------------------------

(chunk
  (do_statement
    body: (block
      (function_call
        name: (identifier)
        arguments: (arguments))
      (return_statement
        (expression_list
          (function_call
            name: (identifier)
            arguments: (arguments))))))
  (do_statement))

================================================================================
while_statement
================================================================================

while i < 9 do
  i = i + 1
end

while false do end

--------------------------------------------------------------------------------

(chunk
  (while_statement
    condition: (binary_expression
      left: (identifier)
      right: (number))
    body: (block
      (assignment_statement
        (variable_list
          name: (identifier))
        (expression_list
          value: (binary_expression
            left: (identifier)
            right: (number))))))
  (while_statement
    condition: (false)))

================================================================================
repeat_statement
================================================================================

repeat
  f1()
  i = i - 1
until i == 0

repeat until false

--------------------------------------------------------------------------------

(chunk
  (repeat_statement
    body: (block
      (function_call
        name: (identifier)
        arguments: (arguments))
      (assignment_statement
        (variable_list
          name: (identifier))
        (expression_list
          value: (binary_expression
            left: (identifier)
            right: (number)))))
    condition: (binary_expression
      left: (identifier)
      right: (number)))
  (repeat_statement
    condition: (false)))

================================================================================
if_statement
================================================================================

if num % 2 == 0 then
  print("even")
elseif num % 2 ~= 0 then
  print("odd")
else
  error("!")
end

if c1 then end

if c1 then else end

if c1 then elseif c2 then else end

--------------------------------------------------------------------------------

(chunk
  (if_statement
    condition: (binary_expression
      left: (binary_expression
        left: (identifier)
        right: (number))
      right: (number))
    consequence: (block
      (function_call
        name: (identifier)
        arguments: (arguments
          (string
            content: (string_content)))))
    alternative: (elseif_statement
      condition: (binary_expression
        left: (binary_expression
          left: (identifier)
          right: (number))
        right: (number))
      consequence: (block
        (function_call
          name: (identifier)
          arguments: (arguments
            (string
              content: (string_content))))))
    alternative: (else_statement
      body: (block
        (function_call
          name: (identifier)
          arguments: (arguments
            (string
              content: (string_content)))))))
  (if_statement
    condition: (identifier))
  (if_statement
    condition: (identifier)
    alternative: (else_statement))
  (if_statement
    condition: (identifier)
    alternative: (elseif_statement
      condition: (identifier))
    alternative: (else_statement)))

================================================================================
for_statement ::: for_generic_clause
================================================================================

for k, v in pairs(kv) do
  print(k, v)
end

for i in ipairs(iv) do end

--------------------------------------------------------------------------------

(chunk
  (for_statement
    clause: (for_generic_clause
      (variable_list
        name: (identifier)
        name: (identifier))
      (expression_list
        (function_call
          name: (identifier)
          arguments: (arguments
            (identifier)))))
    body: (block
      (function_call
        name: (identifier)
        arguments: (arguments
          (identifier)
          (identifier)))))
  (for_statement
    clause: (for_generic_clause
      (variable_list
        name: (identifier))
      (expression_list
        (function_call
          name: (identifier)
          arguments: (arguments
            (identifier)))))))

================================================================================
for_statement ::: for_numeric_clause
================================================================================

for n = 1, 10 do
  print(n)
end

for n = 1, 10, 2 do end

--------------------------------------------------------------------------------

(chunk
  (for_statement
    clause: (for_numeric_clause
      name: (identifier)
      start: (number)
      end: (number))
    body: (block
      (function_call
        name: (identifier)
        arguments: (arguments
          (identifier)))))
  (for_statement
    clause: (for_numeric_clause
      name: (identifier)
      start: (number)
      end: (number)
      step: (number))))

================================================================================
function_declaration
================================================================================

function tbl.f1() end

function tbl:f2() end

function tbl.k1:f3() end

function f4()
  print('f4')
end

local function f5() end

--------------------------------------------------------------------------------

(chunk
  (function_declaration
    name: (dot_index_expression
      table: (identifier)
      field: (identifier))
    parameters: (parameters))
  (function_declaration
    name: (method_index_expression
      table: (identifier)
      method: (identifier))
    parameters: (parameters))
  (function_declaration
    name: (method_index_expression
      table: (dot_index_expression
        table: (identifier)
        field: (identifier))
      method: (identifier))
    parameters: (parameters))
  (function_declaration
    name: (identifier)
    parameters: (parameters)
    body: (block
      (function_call
        name: (identifier)
        arguments: (arguments
          (string
            content: (string_content))))))
  local_declaration: (function_declaration
    name: (identifier)
    parameters: (parameters)))

================================================================================
variable_declaration
================================================================================

local v1 = 1
local v2, v3 = 2, 3

local v4, v4 = f1(), tbl:f2()

--------------------------------------------------------------------------------

(chunk
  local_declaration: (variable_declaration
    (assignment_statement
      (variable_list
        name: (identifier))
      (expression_list
        value: (number))))
  local_declaration: (variable_declaration
    (assignment_statement
      (variable_list
        name: (identifier)
        name: (identifier))
      (expression_list
        value: (number)
        value: (number))))
  local_declaration: (variable_declaration
    (assignment_statement
      (variable_list
        name: (identifier)
        name: (identifier))
      (expression_list
        value: (function_call
          name: (identifier)
          arguments: (arguments))
        value: (function_call
          name: (method_index_expression
            table: (identifier)
            method: (identifier))
          arguments: (arguments))))))

================================================================================
variable_declaration ::: attribute [Lua 5.4]
================================================================================

local c <const>, x <const> = 42
local f <close> = io.open('/file.lua')

--------------------------------------------------------------------------------

(chunk
  local_declaration: (variable_declaration
    (assignment_statement
      (variable_list
        name: (identifier)
        attribute: (attribute
          (identifier))
        name: (identifier)
        attribute: (attribute
          (identifier)))
      (expression_list
        value: (number))))
  local_declaration: (variable_declaration
    (assignment_statement
      (variable_list
        name: (identifier)
        attribute: (attribute
          (identifier)))
      (expression_list
        value: (function_call
          name: (dot_index_expression
            table: (identifier)
            field: (identifier))
          arguments: (arguments
            (string
              content: (string_content))))))))


=========================================
terra simple function
========================================

terra foo(v : int)
  var y : int = 4
  return v * 2
end

----------------------
(chunk
  (terra_function_declaration
    (identifier)
    (terra_parameters
      (identifier)
      (identifier))
    (terra_block
      (terra_statement
        (terra_variable_declaration
          (identifier)
          (identifier)
          (number)))
      (return_statement
        (expression_list
          (binary_expression
            (identifier)
            (number)))))))

=========================================
terra function
========================================

terra doit()
  stdio.printf("Hello\n")
  stdio.fflush(stdio.stdout)
  var fd = fcntl.open("/dev/dri/card1", fcntl.O_RDWR)
  stdio.printf("Fd: %d\n", fd)
  return libdrm.drmModeGetResources(fd)
end

----------------------
(chunk
  (terra_function_declaration
    (identifier)
    (terra_parameters)
    (terra_block
      (terra_statement
        (function_call
          (dot_index_expression
            (identifier)
            (identifier))
          (arguments
            (string
              (string_content
                (escape_sequence))))))
      (terra_statement
        (function_call
          (dot_index_expression
            (identifier)
            (identifier))
          (arguments
            (dot_index_expression
              (identifier)
              (identifier)))))
      (terra_statement
        (terra_variable_declaration
          (identifier)
          (function_call
            (dot_index_expression
              (identifier)
              (identifier))
            (arguments
              (string
                (string_content))
              (dot_index_expression
                (identifier)
                (identifier))))))
      (terra_statement
        (function_call
          (dot_index_expression
            (identifier)
            (identifier))
          (arguments
            (string
              (string_content
                (escape_sequence)))
            (identifier))))
      (return_statement
        (expression_list
          (function_call
            (dot_index_expression
              (identifier)
              (identifier))
            (arguments
              (identifier))))))))

=========================================
terra macro
========================================

local zero = macro(function(v)
  return `C.memset(&v, 0, sizeof([v:gettype()]))
end)

----------------------
(chunk
  (variable_declaration
    (assignment_statement
      (variable_list
        (identifier))
      (expression_list
        (function_call
          (identifier)
          (arguments
            (function_definition
              (parameters
                (identifier))
              (block
                (return_statement
                  (expression_list
                    (terra_macro_tick
                      (function_call
                        (dot_index_expression
                          (identifier)
                          (identifier))
                        (arguments
                          (terra_pointer
                            (identifier))
                          (number)
                          (function_call
                            (identifier)
                            (arguments
                              (terra_macro_escape
                                (function_call
                                  (method_index_expression
                                    (identifier)
                                    (identifier))
                                  (arguments))))))))))))))))))

=========================================
terra def
========================================

local zero = terra() return @12 end
local zero = terra() return @(12) + @val end

----------------------

(chunk
  (variable_declaration
    (assignment_statement
      (variable_list
        (identifier))
      (expression_list
        (terra_function_definition
          (terra_parameters)
          (terra_block
            (return_statement
              (ERROR)
              (expression_list
                (number))))))))
  (variable_declaration
    (assignment_statement
      (variable_list
        (identifier))
      (expression_list
        (terra_function_definition
          (terra_parameters)
          (terra_block
            (return_statement
              (expression_list
                (binary_expression
                  (terra_deref
                    (number))
                  (terra_deref
                    (identifier)))))))))))


=========================================
terra complex
========================================

terra BitSet:toggle(bit : uint64)
  var block_value = &self.blocks[bit / block_size]
  var bit_in_block = bit and block_mask
  var block_value, bit_in_block = self:block_for_bit(bit)
  var mask = 1ULL << bit_in_block
  @block_value = (@block_value) ^ mask
end

----------------------

(chunk
  (terra_function_declaration
    (method_index_expression
      (identifier)
      (identifier))
    (terra_parameters
      (identifier)
      (identifier))
    (terra_block
      (terra_statement
        (terra_variable_declaration
          (identifier)
          (terra_pointer
            (bracket_index_expression
              (dot_index_expression
                (identifier)
                (identifier))
              (binary_expression
                (identifier)
                (identifier))))))
      (terra_statement
        (terra_variable_declaration
          (identifier)
          (binary_expression
            (identifier)
            (identifier))))
      (terra_statement
        (terra_variable_declaration
          (identifier)
          (identifier)
          (function_call
            (method_index_expression
              (identifier)
              (identifier))
            (arguments
              (identifier)))))
      (terra_statement
        (terra_variable_declaration
          (identifier)
          (binary_expression
            (number)
            (identifier))))
      (terra_statement
        (terra_assignment
          (terra_deref
            (identifier))
          (binary_expression
            (parenthesized_expression
              (terra_deref
                (identifier)))
            (identifier)))))))

=========================================
terra while loop
========================================

local fib =
terra(a : Num) : Num
    var i,c,p = 0,1,1
    while i < a do
        c,p = c + p,c
        i = i + 1
    end
    return c
end

----------------------

(chunk
  (variable_declaration
    (assignment_statement
      (variable_list
        (identifier))
      (expression_list
        (terra_function_definition
          (terra_parameters
            (identifier)
            (identifier))
          (identifier)
          (terra_block
            (terra_statement
              (terra_variable_declaration
                (identifier)
                (identifier)
                (identifier)
                (number)
                (number)
                (number)))
            (terra_statement
              (terra_while_statement
                (binary_expression
                  (identifier)
                  (identifier))
                (terra_block
                  (terra_statement
                    (terra_assignment
                      (identifier)
                      (identifier)
                      (binary_expression
                        (identifier)
                        (identifier))
                      (identifier)))
                  (terra_statement
                    (terra_assignment
                      (identifier)
                      (binary_expression
                        (identifier)
                        (number)))))))
            (return_statement
              (expression_list
                (identifier)))))))))

=========================================
terra macro hell
========================================

local whilebreak = quote
    var i = 0
    while i < 7 do
        if i == 3 then
            break
        end
        i = i + 1
    end
    return i
end


----------------------

(chunk
  (variable_declaration
    (assignment_statement
      (variable_list
        (identifier))
      (expression_list
        (terra_macro_quote_block
          (terra_block
            (terra_statement
              (terra_variable_declaration
                (identifier)
                (number)))
            (terra_statement
              (terra_while_statement
                (binary_expression
                  (identifier)
                  (number))
                (terra_block
                  (terra_statement
                    (terra_if_statement
                      (binary_expression
                        (identifier)
                        (number))
                      (terra_block
                        (terra_statement
                          (break_statement)))))
                  (terra_statement
                    (terra_assignment
                      (identifier)
                      (binary_expression
                        (identifier)
                        (number)))))))
            (return_statement
              (expression_list
                (identifier)))))))))

=========================================
terra goto
========================================

terra foo()
	var a = 0
	::[begin]::
	if a >= 10 then
		goto [theend]
	end
	a = a + 1
	goto [begin]
	::[theend]::
	return a
end

terra foo()
	var a = 0
	::begin::
	if a >= 10 then
		goto theend
	end
	a = a + 1
	goto begin
	::theend::
	return a
end

----------------------

(chunk
  (terra_function_declaration
    (identifier)
    (terra_parameters)
    (terra_block
      (terra_statement
        (terra_variable_declaration
          (identifier)
          (number)))
      (terra_statement
        (terra_label_statement
          (terra_macro_escape
              (identifier))))
      (terra_statement
        (terra_if_statement
          (binary_expression
            (identifier)
            (number))
          (terra_block
            (terra_statement
              (terra_goto_statement
                (terra_macro_escape
                    (identifier)))))))
      (terra_statement
        (terra_assignment
          (identifier)
          (binary_expression
            (identifier)
            (number))))
      (terra_statement
        (terra_goto_statement
          (terra_macro_escape
              (identifier))))
      (terra_statement
        (terra_label_statement
          (terra_macro_escape
              (identifier))))
      (return_statement
        (expression_list
          (identifier)))))
  (terra_function_declaration
    (identifier)
    (terra_parameters)
    (terra_block
      (terra_statement
        (terra_variable_declaration
          (identifier)
          (number)))
      (terra_statement
        (terra_label_statement
          (identifier)))
      (terra_statement
        (terra_if_statement
          (binary_expression
            (identifier)
            (number))
          (terra_block
            (terra_statement
              (terra_goto_statement
                (identifier))))))
      (terra_statement
        (terra_assignment
          (identifier)
          (binary_expression
            (identifier)
            (number))))
      (terra_statement
        (terra_goto_statement
          (identifier)))
      (terra_statement
        (terra_label_statement
          (identifier)))
      (return_statement
        (expression_list
          (identifier))))))


=========================================
terra local decl
========================================

local terra min(a : int, b : int)
	return terralib.select(a < b, a, b)
end

----------------------
(chunk
  (terra_local_function_declaration
    (identifier)
    (terra_parameters
      (identifier)
      (identifier)
      (identifier)
      (identifier))
    (terra_block
      (return_statement
        (expression_list
          (function_call
            (dot_index_expression
              (identifier)
              (identifier))
            (arguments
              (binary_expression
                (identifier)
                (identifier))
              (identifier)
              (identifier))))))))

=========================================
terra quote for
========================================

function blockedloop(N,M,K,blocksizes,bodyfn)
  local function generatelevel(n,ii,jj,kk,bb0,bb1,bb2)
    if n > #blocksizes then
      return bodyfn(ii,jj,kk)
    end
    local blocksize = blocksizes[n]
    return quote for i = ii,min(ii+bb0,N),blocksize do
                   for j = jj,min(jj+bb1,M),blocksize do
                      for k = kk,min(kk+bb2,K),blocksize do
                        [ generatelevel(n+1,i,j,k,blocksize,blocksize,blocksize) ]
           end end end end
  end
  return generatelevel(1,0,0,0,N,M,K)
end


----------------------

(chunk
  (function_declaration
    (identifier)
    (parameters
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier))
    (block
      (function_declaration
        (identifier)
        (parameters
          (identifier)
          (identifier)
          (identifier)
          (identifier)
          (identifier)
          (identifier)
          (identifier))
        (block
          (if_statement
            (binary_expression
              (identifier)
              (unary_expression
                (identifier)))
            (block
              (return_statement
                (expression_list
                  (function_call
                    (identifier)
                    (arguments
                      (identifier)
                      (identifier)
                      (identifier)))))))
          (variable_declaration
            (assignment_statement
              (variable_list
                (identifier))
              (expression_list
                (bracket_index_expression
                  (identifier)
                  (identifier)))))
          (return_statement
            (expression_list
              (terra_macro_quote_block
                (terra_block
                  (terra_statement
                    (terra_for_statement
                      (terra_for_numeric_clause
                        (identifier)
                        (identifier)
                        (function_call
                          (identifier)
                          (arguments
                            (binary_expression
                              (identifier)
                              (identifier))
                            (identifier)))
                        (identifier))
                      (terra_block
                        (terra_statement
                          (terra_for_statement
                            (terra_for_numeric_clause
                              (identifier)
                              (identifier)
                              (function_call
                                (identifier)
                                (arguments
                                  (binary_expression
                                    (identifier)
                                    (identifier))
                                  (identifier)))
                              (identifier))
                            (terra_block
                              (terra_statement
                                (terra_for_statement
                                  (terra_for_numeric_clause
                                    (identifier)
                                    (identifier)
                                    (function_call
                                      (identifier)
                                      (arguments
                                        (binary_expression
                                          (identifier)
                                          (identifier))
                                        (identifier)))
                                    (identifier))
                                  (terra_block
                                    (terra_statement
                                      (terra_macro_escape
                                        (function_call
                                            (identifier)
                                            (arguments
                                              (binary_expression
                                                (identifier)
                                                (number))
                                              (identifier)
                                              (identifier)
                                              (identifier)
                                              (identifier)
                                              (identifier)
                                              (identifier))))))))))))))))))))
      (return_statement
        (expression_list
          (function_call
            (identifier)
            (arguments
              (number)
              (number)
              (number)
              (number)
              (identifier)
              (identifier)
              (identifier))))))))


=========================================
terra quote for
========================================

function x()
	terra([A] , [B] , [C] , [ld])
		for [mm] = 0, NB, RM do
			for [nn] = 0, NB,RN*V do
				[loadc];
				for [k] = 0, NB do
					llvmprefetch(B + 4*ldb,0,3,1);
					[calcc];
					B = B + ldb
					A = A + 1
				end
				[storec];
				A = A - NB
				C = C + RN*V
				B = B - ldb*NB + RN*V
			end
			C = C + RM * ldb - NB
			B = B - NB
			A = A + lda*RM
		end
	end
    for m = 0, RM-1 do 
    	for n = 0, RN-1 do
    		calcc:insert(quote
    			[c[m][n]] = [c[m][n]] + [a[m]] * [b[n]]
    		end)
    	end
    end
end
terra stubs.init(self : &T)
    self.__vtable = mm.vtableptr
    return self
end


----------------------


(chunk
  (function_declaration
    (identifier)
    (parameters)
    (block
      (terra_function_declaration
        (MISSING identifier)
        (terra_parameters
          (terra_macro_escape
            (identifier))
          (terra_macro_escape
            (identifier))
          (terra_macro_escape
            (identifier))
          (terra_macro_escape
            (identifier)))
        (terra_block
          (terra_statement
            (terra_for_statement
              (terra_for_numeric_clause
                (terra_macro_escape
                  (identifier))
                (number)
                (identifier)
                (identifier))
              (terra_block
                (terra_statement
                  (terra_for_statement
                    (terra_for_numeric_clause
                      (terra_macro_escape
                        (identifier))
                      (number)
                      (identifier)
                      (binary_expression
                        (identifier)
                        (identifier)))
                    (terra_block
                      (terra_statement
                        (terra_macro_escape
                          (identifier)))
                      (terra_statement
                        (terra_for_statement
                          (terra_for_numeric_clause
                            (terra_macro_escape
                              (identifier))
                            (number)
                            (identifier))
                          (terra_block
                            (terra_statement
                              (function_call
                                (identifier)
                                (arguments
                                  (binary_expression
                                    (identifier)
                                    (binary_expression
                                      (number)
                                      (identifier)))
                                  (number)
                                  (number)
                                  (number))))
                            (terra_statement
                              (terra_macro_escape
                                (identifier)))
                            (terra_statement
                              (terra_assignment
                                (identifier)
                                (binary_expression
                                  (identifier)
                                  (identifier))))
                            (terra_statement
                              (terra_assignment
                                (identifier)
                                (binary_expression
                                  (identifier)
                                  (number)))))))
                      (terra_statement
                        (terra_macro_escape
                          (identifier)))
                      (terra_statement
                        (terra_assignment
                          (identifier)
                          (binary_expression
                            (identifier)
                            (identifier))))
                      (terra_statement
                        (terra_assignment
                          (identifier)
                          (binary_expression
                            (identifier)
                            (binary_expression
                              (identifier)
                              (identifier)))))
                      (terra_statement
                        (terra_assignment
                          (identifier)
                          (binary_expression
                            (binary_expression
                              (identifier)
                              (binary_expression
                                (identifier)
                                (identifier)))
                            (binary_expression
                              (identifier)
                              (identifier))))))))
                (terra_statement
                  (terra_assignment
                    (identifier)
                    (binary_expression
                      (binary_expression
                        (identifier)
                        (binary_expression
                          (identifier)
                          (identifier)))
                      (identifier))))
                (terra_statement
                  (terra_assignment
                    (identifier)
                    (binary_expression
                      (identifier)
                      (identifier))))
                (terra_statement
                  (terra_assignment
                    (identifier)
                    (binary_expression
                      (identifier)
                      (binary_expression
                        (identifier)
                        (identifier))))))))))
      (for_statement
        (for_numeric_clause
          (identifier)
          (number)
          (binary_expression
            (identifier)
            (number)))
        (block
          (for_statement
            (for_numeric_clause
              (identifier)
              (number)
              (binary_expression
                (identifier)
                (number)))
            (block
              (function_call
                (method_index_expression
                  (identifier)
                  (identifier))
                (arguments
                  (terra_macro_quote_block
                    (terra_block
                      (terra_statement
                        (terra_assignment
                          (terra_macro_escape
                            (bracket_index_expression
                              (bracket_index_expression
                                (identifier)
                                (identifier))
                              (identifier)))
                          (binary_expression
                            (terra_macro_escape
                              (bracket_index_expression
                                (bracket_index_expression
                                  (identifier)
                                  (identifier))
                                (identifier)))
                            (binary_expression
                              (terra_macro_escape
                                (bracket_index_expression
                                  (identifier)
                                  (identifier)))
                              (terra_macro_escape
                                (bracket_index_expression
                                  (identifier)
                                      (identifier)))))))))))))))))
      (terra_function_declaration
        (dot_index_expression
          (identifier)
          (identifier))
        (terra_parameters
          (identifier)
          (terra_pointer
            (identifier)))
        (terra_block
          (terra_statement
            (terra_assignment
              (dot_index_expression
                (identifier)
                (identifier))
              (dot_index_expression
                (identifier)
                (identifier))))
          (return_statement
            (expression_list
              (identifier))))))


=========================================
terra struct
========================================

local struct Impl {}
struct iface.type {
    __vtable : &Impl
}

print(struct {})
print(struct {a :int b:int})
print(struct {a :int, b:int,})
print(struct {a :int, b:int})
print(struct {a :int; b:int,})


--------
(chunk
  (terra_struct_decl
    (terra_struct
      (identifier)))
  (terra_struct_decl
    (terra_struct
      (dot_index_expression
        (identifier)
        (identifier))
      (identifier)
      (terra_pointer
        (identifier))))
  (function_call
    (identifier)
    (arguments
      (terra_struct)))
  (function_call
    (identifier)
    (arguments
      (terra_struct
        (identifier)
        (identifier)
        (identifier)
        (identifier))))
  (function_call
    (identifier)
    (arguments
      (terra_struct
        (identifier)
        (identifier)
        (identifier)
        (identifier))))
  (function_call
    (identifier)
    (arguments
      (terra_struct
        (identifier)
        (identifier)
        (identifier)
        (identifier))))
  (function_call
    (identifier)
    (arguments
      (terra_struct
        (identifier)
        (identifier)
        (identifier)
        (identifier)))))

=========================================
terra function type
========================================

local x = int -> int -> int
-------
  (chunk
    (variable_declaration
      (assignment_statement
        (variable_list
          (identifier))
        (expression_list
          (terra_function_type
            (identifier)
            (terra_function_type
              (identifier)
              (identifier)))))))

